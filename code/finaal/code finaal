#include "BluetoothSerial.h"
#if !defined(CONFIG_BT_ENABLED) || !defined(CONFIG_BLUEDROID_ENABLED)
#error Bluetooth is not enabled! Please run `make menuconfig` to and enable it
#endif
#include "SerialCommand.h"
#include "EEPROMAnything.h"
#include <EEPROM.h>

BluetoothSerial SerialBT;
#define SerialPort SerialBT
#define Baudrate 115200

SerialCommand sCmd(SerialPort);
bool debug;
unsigned long previous, calculationTime;


#define MotorLeftForward 15
#define MotorLeftBackward 2
#define MotorRightForward 0
#define MotorRightBackward 4

const int oneWireBus = 32;
String message = "";
char incomingChar;
String temperatureString = "";
unsigned long previousMillis = 0;    
const long interval = 10000;
const int sensor[] = {34,35,32,33,25,26,27,14};

long normalised[8];
long Value[8];
float debugPosition;
bool run;
float position;
float output;
float iTerm = 0;
float lastErr; 

struct param_t
{
  unsigned long cycleTime;
  /* andere parameters die in het eeprom geheugen moeten opgeslagen worden voeg je hier toe ... */
  int black[8];
  int white[8];
  int power;
  float diff;
  float kp;
  float ki; 
  float kd;
} params;
#define EEPROM_SIZE sizeof(param_t)

void setup() 
{
  pinMode(34, INPUT);
  pinMode(35, INPUT);
  pinMode(32, INPUT);
  pinMode(33, INPUT);
  pinMode(25, INPUT);
  pinMode(26, INPUT);
  pinMode(27, INPUT);
  pinMode(14, INPUT);
  pinMode(MotorLeftForward, OUTPUT);
  pinMode(MotorLeftBackward, OUTPUT);
  pinMode(MotorRightForward, OUTPUT);
  pinMode(MotorRightBackward, OUTPUT);
  SerialBT.begin("CarSpotter32-Kjerno");
  Serial.println("The device started, now you can pair it with bluetooth!");

  SerialPort.begin(Baudrate);
  sCmd.addCommand("set", onSet);
  sCmd.addCommand("debug", onDebug);
  sCmd.addCommand("calibrate", onCalibrate);
  sCmd.addCommand("run", onRun);
  sCmd.addCommand("stop", onStop); 
  sCmd.setDefaultHandler(onUnknownCommand);

  pinMode(13, OUTPUT);
  SerialPort.println("ready");

  EEPROM.begin(EEPROM_SIZE);
  EEPROM.get(0, params);
  EEPROM.end();
}

void loop() 
{
 sCmd.readSerial();
  unsigned long current = micros();
  if (current - previous >= params.cycleTime)
  {
    previous = current;

    for (int i = 0; i < 8; i++)
    {
      Value[i] = analogRead(sensor[i]);
      normalised[i] = map(Value[i], params.black[i], params.white[i], 0, 4096);
    }

    position = 0;  
    int index = 0;  
    for(int i = 1; i < 8; i++) if (normalised[i] < normalised[index]) index = i;
   
    if (normalised[index] > 4000) run = false; 
    if (index == 0) position = -30; 
    else if (index == 7) position = 30;
    else
    {
      long sensor_nul = normalised[index];
      long sensor_min_een = normalised[index-1];
      long sensor_plus_een = normalised[index+1];

      float b = ((float)(sensor_plus_een - sensor_min_een))/2;
      float a = sensor_plus_een - b - sensor_nul; 

      position = -b / (2 * a); 
      position += index - 3.5;
      position *= 9.525;      
    }
    debugPosition = position; 

    float error = -position;

    //Proportioneel
    output = error * params.kp;
    
    //Integrerend
    iTerm += params.ki*error;
    output += iTerm;

    //Differentieel
    output += params.kd * (error - lastErr);
    lastErr = error;

    output = constrain(output, -510, 510);
    
    int powerLeft = 0;
    int powerRight = 0;

    if (run) if (output >= 0)
    {
      powerLeft = constrain(params.power + params.diff * output, -255, 255); 
      powerRight = constrain(powerLeft - output, -255, 255); 
      powerLeft = powerRight + output; 
    }
    else
    {
      powerRight = constrain(params.power - params.diff * output, -255, 255); 
      powerLeft = constrain(powerRight + output, -255, 255); 
      powerRight = powerLeft - output;
    }

    analogWrite(MotorLeftForward, powerLeft > 0 ? powerLeft : 0);
    analogWrite(MotorLeftBackward, powerLeft < 0 ? -powerLeft : 0);
    analogWrite(MotorRightForward, powerRight > 0 ? powerRight : 0);
    analogWrite(MotorRightBackward, powerRight < 0 ? -powerRight : 0);
  }

  unsigned long difference = micros() - current;
  if (difference > calculationTime) calculationTime = difference;
}
void onUnknownCommand(char *command)
{
  SerialPort.print("unknown command: \"");
  SerialPort.print(command);
  SerialPort.println("\"");
}

void onRun()
{
  run =true;
  iTerm = 0;
}

void onStop()
{
  run =false; 
}

void onSet()
{
  SerialPort.println("set command");
  char* param = sCmd.next();
  char* value = sCmd.next();  
  
  if (strcmp(param, "cycle") == 0) 
  {
    long newCycleTime = atol(value);
    float ratio = ((float) newCycleTime) / ((float) params.cycleTime);

    params.ki *= ratio;
    params.kd /= ratio; 

    params.cycleTime = newCycleTime;
  }
  
  else if (strcmp(param, "cycle") == 0) params.cycleTime = atol(value); // if 
  else if (strcmp(param, "power") == 0) params.power = atol(value); 
  else if (strcmp(param, "diff") == 0) params.diff = atof(value);
  else if (strcmp(param, "kp") == 0) params.kp = atof(value);
  
  else if (strcmp(param, "ki") == 0)
  {
    float cycleTimeInSec = ((float) params.cycleTime) / 1000000;
    params.ki = atof(value) * cycleTimeInSec;
  }
  else if (strcmp(param, "kd") == 0)
  {
    float cycleTimeInSec = ((float) params.cycleTime) / 1000000;
    params.kd = atof(value) / cycleTimeInSec;
  }

  EEPROM.begin(EEPROM_SIZE);
  EEPROM.put(0, params);
  EEPROM.commit();
  EEPROM.end();
}

void onDebug()
{
  SerialPort.print("cycle time: ");
  SerialPort.println(params.cycleTime);
  
  /* parameters weergeven met behulp van het debug commando doe je hier ... */
SerialPort.print("black: ");
  for (int i = 0; i < 8; i++)
    {
      SerialPort.print(params.black[i]);
      SerialPort.print(" ");
    }
    SerialPort.println(" ");

SerialPort.print("white: ");
    for (int i = 0; i < 8; i++)
    {
      SerialPort.print(params.white[i]);
      SerialPort.print(" ");
    }
    SerialPort.println(" ");

SerialPort.print("norm: ");
  for (int i = 0; i < 8; i++)
    {
      SerialPort.print(normalised[i]);
      SerialPort.print(" ");
    }
    SerialPort.println(" ");

SerialPort.print("eff: ");
  for (int i = 0; i < 8; i++)
    {
      SerialPort.print(Value[i]);
      SerialPort.print(" ");
    }
    SerialPort.println(" ");
  
  SerialPort.print("calculation time: ");
  SerialPort.println(calculationTime);
  calculationTime = 0;


  SerialPort.print("pos: ");
  SerialPort.println(position);
  SerialPort.print("power: ");
  SerialPort.println(params.power);
  SerialPort.print("diff: ");
  SerialPort.println(params.diff);
  SerialPort.print("kp: ");
  SerialPort.println(params.kp);

  float cycleTimeInSec = ((float) params.cycleTime) / 1000000;

  float ki = params.ki / cycleTimeInSec;
  SerialPort.print("ki: ");
  SerialPort.println(ki);

  float kd = params.kd * cycleTimeInSec;
  SerialPort.print("kd: ");
  SerialPort.println(kd);
}

void onCalibrate()
{
  char* param = sCmd.next();

  if (strcmp(param, "black") == 0)
  {
    SerialPort.print("start calibrating black... ");
    for (int i = 0; i < 8; i++) params.black[i]=analogRead(sensor[i]);
    SerialPort.println("done");
  }
  else if (strcmp(param, "white") == 0)
  {
    SerialPort.print("start calibrating white... ");    
    for (int i = 0; i < 8; i++) params.white[i]=analogRead(sensor[i]);  
    SerialPort.println("done");      
  }

   EEPROM.begin(EEPROM_SIZE);
  EEPROM.put(0, params);
  EEPROM.commit();
  EEPROM.end();
}
